this_nii <- readnii(fname)
vals <- c(this_nii[mask==1])
return(vals)
}
extract_glasser <- function(subid,sesid,dataname) {
fname <- sprintf("/cbica/projects/alpraz_EI/data/%s/%s/%s/amygdala_glasser_connectivity.csv",dataname,subid,sesid)
thisData<- read.table(fname)
vals <- as_tibble(thisData)
return(vals)
}
extract_glasser_matrix <- function(subid,sesid,dataname,gsr){
if (gsr == "GSR") {
fname <- sprintf("/cbica/projects/alpraz_EI/data/%s/%s/%s/glasser_CC_GSR_000.netcc",dataname,subid,sesid)
} else {
fname <- sprintf("/cbica/projects/alpraz_EI/data/%s/%s/%s/glasser_CC_000.netcc",dataname,subid,sesid)
}
thisCC <- as.matrix(read.table(fname,header = T,skip = 4))
# thisCC_vector = as.vector(thisCC)
thisCC_vector = thisCC[upper.tri(thisCC,diag = F)]
vals <- as_tibble(data.frame(t(thisCC_vector)))
}
extract_matrix <- function(subid,sesid,atlasname,gsr){
if (gsr == "GSR") {
fname <- sprintf("/cbica/projects/alpraz_EI/data/XCP_SDK_TASK_GSR2020-03-30/%s/%s/%s_CC_GSR_000.netcc",subid,sesid,atlasname)
} else {
fname <- sprintf("/cbica/projects/alpraz_EI/data/XCP_SDK_TASK_2020-03-25/%s/%s/%s_CC_noGSR_000.netcc",subid,sesid,atlasname)
}
print(fname)
thisCC <- as.matrix(read.table(fname,header = T,skip = 4))
# thisCC_vector = as.vector(thisCC)
thisCC_vector = thisCC[upper.tri(thisCC,diag = F)]
vals <- as_tibble(data.frame(t(thisCC_vector)))
}
extract_alff_glasser <- function(subid,sesid,dataname) {
fname <- sprintf("/cbica/projects/alpraz_EI//data/%s/xcpengine/sub-0%s/ses-00%s/task-emotionid/space-MNI152NLin2009cAsym/roiquant/glasser360/sub-0%s_ses-00%s_task-emotionid_space-MNI152NLin2009cAsym_glasser360_mean_alffZ.csv",dataname,subid,sesid,subid,sesid)
thisData<- read.csv(fname)
vals <- as_tibble(thisData)
return(vals)
}
extract_reho_glasser <- function(subid,sesid,dataname) {
fname <- sprintf("/cbica/projects/alpraz_EI//data/%s/xcpengine/sub-0%s/ses-00%s/task-emotionid/space-MNI152NLin2009cAsym/roiquant/glasser360/sub-0%s_ses-00%s_task-emotionid_space-MNI152NLin2009cAsym_glasser360_mean_rehoZ.csv",dataname,subid,sesid,subid,sesid)
thisData<- read.csv(fname)
vals <- as_tibble(thisData)
return(vals)
}
extract_alff_voxels <- function(subid,sesid,dataname) {
fname <- sprintf("/cbica/projects/alpraz_EI/data/%s/%s/%s/alffZ.nii.gz",dataname,subid,sesid)
mask<-coverage_mask
this_nii <- readnii(fname)
vals <- c(this_nii[mask==1])
return(vals)
}
subData <- read.csv('/cbica/projects/alpraz_EI/input/alpraz_sublist_FD.csv')
subInfo <- subData %>% filter(exists==1 & motion_pass==1)
# coverage_mask <- readnii("/cbica/projects/alpraz_EI/input/coverage_mask_95perc.nii.gz")
#
# data_source = "matrix" #"amygdala_seed" #"alff_voxel"  # "glasser_matrix_GSR"# "glasser_matrix" #"glasser_matrix_GSR", "glasser_amygdala", "amygdala_seed"
#
# atlasname = "aal116"
# if (file.exists(sprintf("%s.csv",data_source))) {
#     df <- load(sprintf("%s.Rda",data_source))
#   } else {
#   switch (data_source,
#     "matrix" = {
#       gm<- subInfo %>%
#         filter(!(subid %in% c(11599,12435,13077,13415,13486))) %>%
#         group_by(subid, sesid) %>%
#         mutate(df = list(extract_matrix(subid,sesid,atlasname,"GSR"))) %>%
#         unnest(df)
#       df <- gm %>% ungroup() %>% select(subid,sesid,drug,contains("X",ignore.case = F))
#           },
#     "glasser_matrix" = {
#       gm<- subInfo %>%
#         group_by(subid, sesid) %>%
#         mutate(df = list(extract_glasser_matrix(subid,sesid,"XCP_task-emotionid_acq-acompcor_2020-02-06","noGSR"))) %>%
#         unnest(df)
#       df <- gm %>% ungroup() %>% select(subid,sesid,drug,contains("X",ignore.case = F))
#       },
#     "glasser_matrix_GSR" = {
#       gm_gsr<- subInfo %>%
#         filter(exists == 1& subid!=13532) %>%
#         group_by(subid, sesid) %>%
#         mutate(df = list(extract_glasser_matrix(subid,sesid,"XCP_task-emotionid_acq-acompcor_GSR_2020-02-06","GSR"))) %>%
#         unnest(df)
#       df <- gm_gsr %>% ungroup() %>% select(subid,sesid,drug,contains("X",ignore.case = F))
#       },
#     "glasser_amygdala" = {
#       g<- subInfo %>%
#         filter(exists == 1) %>%
#         group_by(subid, sesid) %>%
#         mutate(df = list(extract_glasser(subid,sesid,"XCP_task-emotionid_acq-acompcor_2020-02-06"))) %>%
#         unnest(df)
#       df <- g %>% ungroup() %>% select(subid,sesid,drug,contains("NZ"))
#       },
#     "amygdala_seed" = {
#       # t<-readRDS("/cbica/projects/alpraz_EI/input/amygdala_conn_voxelwise.rds")
#       t<-subInfo %>% mutate(voxMap = purrr::pmap(list(subid,sesid,"XCP_task-emotionid_acq-acompcor_2020-02-06"),.f = extract_voxels))
#       saveRDS(t,"/cbica/projects/alpraz_EI/input/amygdala_conn_voxelwise.rds")
#       s<-as.data.frame(t(simplify2array(t$voxMap)))
#       df<-cbind(subInfo %>% select(subid,sesid,drug),s)
#     }
#   )
#
#   # ALFF & Reho
#   switch (data_source,
#     "alff_glasser" = {
#       alff<- subInfo %>%
#         group_by(subid, sesid) %>%
#         mutate(df = list(extract_alff_glasser(subid,sesid,"XCP_SDK_TASK_2020-03-25"))) %>%
#         unnest(df)
#       df <- alff %>% ungroup() %>% select(subid,sesid,drug,contains("alff")) %>% select_if(~ !any(is.na(.)))
#     },
#     "reho_glasser" = {
#       reho<- subInfo %>%
#         group_by(subid, sesid) %>%
#         mutate(df = list(extract_reho_glasser(subid,sesid,"XCP_SDK_TASK_2020-03-25"))) %>%
#         unnest(df)
#       df <- reho %>% ungroup() %>% select(subid,sesid,drug,contains("reho")) %>% select_if(~ !any(is.na(.)))
#     },
#     "alff_voxel" = {
#       t<-subInfo %>% mutate(voxMap = purrr::pmap(list(subid,sesid,"XCP_SDK_TASK_2020-03-25"),.f = extract_alff_voxels))
#       saveRDS(t,"/cbica/projects/alpraz_EI/input/alffZ_voxelwise_gm.rds")
#       s<-as.data.frame(t(simplify2array(t$voxMap)))
#       df<-cbind(subInfo %>% select(subid,sesid,drug),s)
#     }
#   )
#   }
# }
## Load Libraries
require(ggplot2)
require(tidyverse)
library(oro.nifti)
library(neurobase)
library(gtools)
library(e1071)
library(ridge)
library(matrixTests)
theme_set(theme_classic())
extract_voxels <- function(subid,sesid,dataname) {
fname <- sprintf("/cbica/projects/alpraz_EI/data/%s/%s/%s/amygdala_conn_fisherz.nii.gz",dataname,subid,sesid)
mask<-coverage_mask
this_nii <- readnii(fname)
vals <- c(this_nii[mask==1])
return(vals)
}
extract_glasser <- function(subid,sesid,dataname) {
fname <- sprintf("/cbica/projects/alpraz_EI/data/%s/%s/%s/amygdala_glasser_connectivity.csv",dataname,subid,sesid)
thisData<- read.table(fname)
vals <- as_tibble(thisData)
return(vals)
}
extract_glasser_matrix <- function(subid,sesid,dataname,gsr){
if (gsr == "GSR") {
fname <- sprintf("/cbica/projects/alpraz_EI/data/%s/%s/%s/glasser_CC_GSR_000.netcc",dataname,subid,sesid)
} else {
fname <- sprintf("/cbica/projects/alpraz_EI/data/%s/%s/%s/glasser_CC_000.netcc",dataname,subid,sesid)
}
thisCC <- as.matrix(read.table(fname,header = T,skip = 4))
# thisCC_vector = as.vector(thisCC)
thisCC_vector = thisCC[upper.tri(thisCC,diag = F)]
vals <- as_tibble(data.frame(t(thisCC_vector)))
}
extract_matrix <- function(subid,sesid,atlasname,gsr){
if (gsr == "GSR") {
fname <- sprintf("/cbica/projects/alpraz_EI/data/XCP_SDK_TASK_GSR2020-03-30/%s/%s/%s_CC_GSR_000.netcc",subid,sesid,atlasname)
} else {
fname <- sprintf("/cbica/projects/alpraz_EI/data/XCP_SDK_TASK_2020-03-25/%s/%s/%s_CC_noGSR_000.netcc",subid,sesid,atlasname)
}
print(fname)
thisCC <- as.matrix(read.table(fname,header = T,skip = 4))
# thisCC_vector = as.vector(thisCC)
thisCC_vector = thisCC[upper.tri(thisCC,diag = F)]
vals <- as_tibble(data.frame(t(thisCC_vector)))
}
extract_alff_glasser <- function(subid,sesid,dataname) {
fname <- sprintf("/cbica/projects/alpraz_EI//data/%s/xcpengine/sub-0%s/ses-00%s/task-emotionid/space-MNI152NLin2009cAsym/roiquant/glasser360/sub-0%s_ses-00%s_task-emotionid_space-MNI152NLin2009cAsym_glasser360_mean_alffZ.csv",dataname,subid,sesid,subid,sesid)
thisData<- read.csv(fname)
vals <- as_tibble(thisData)
return(vals)
}
extract_reho_glasser <- function(subid,sesid,dataname) {
fname <- sprintf("/cbica/projects/alpraz_EI//data/%s/xcpengine/sub-0%s/ses-00%s/task-emotionid/space-MNI152NLin2009cAsym/roiquant/glasser360/sub-0%s_ses-00%s_task-emotionid_space-MNI152NLin2009cAsym_glasser360_mean_rehoZ.csv",dataname,subid,sesid,subid,sesid)
thisData<- read.csv(fname)
vals <- as_tibble(thisData)
return(vals)
}
extract_alff_voxels <- function(subid,sesid,dataname) {
fname <- sprintf("/cbica/projects/alpraz_EI/data/%s/%s/%s/alffZ.nii.gz",dataname,subid,sesid)
mask<-coverage_mask
this_nii <- readnii(fname)
vals <- c(this_nii[mask==1])
return(vals)
}
subData <- read.csv('/cbica/projects/alpraz_EI/input/alpraz_sublist_FD.csv')
subInfo <- subData %>% filter(exists==1 & motion_pass==1)
# coverage_mask <- readnii("/cbica/projects/alpraz_EI/input/coverage_mask_95perc.nii.gz")
#
# data_source = "matrix" #"amygdala_seed" #"alff_voxel"  # "glasser_matrix_GSR"# "glasser_matrix" #"glasser_matrix_GSR", "glasser_amygdala", "amygdala_seed"
#
# atlasname = "aal116"
# if (file.exists(sprintf("%s.csv",data_source))) {
#     df <- load(sprintf("%s.Rda",data_source))
#   } else {
#   switch (data_source,
#     "matrix" = {
#       gm<- subInfo %>%
#         filter(!(subid %in% c(11599,12435,13077,13415,13486))) %>%
#         group_by(subid, sesid) %>%
#         mutate(df = list(extract_matrix(subid,sesid,atlasname,"GSR"))) %>%
#         unnest(df)
#       df <- gm %>% ungroup() %>% select(subid,sesid,drug,contains("X",ignore.case = F))
#           },
#     "glasser_matrix" = {
#       gm<- subInfo %>%
#         group_by(subid, sesid) %>%
#         mutate(df = list(extract_glasser_matrix(subid,sesid,"XCP_task-emotionid_acq-acompcor_2020-02-06","noGSR"))) %>%
#         unnest(df)
#       df <- gm %>% ungroup() %>% select(subid,sesid,drug,contains("X",ignore.case = F))
#       },
#     "glasser_matrix_GSR" = {
#       gm_gsr<- subInfo %>%
#         filter(exists == 1& subid!=13532) %>%
#         group_by(subid, sesid) %>%
#         mutate(df = list(extract_glasser_matrix(subid,sesid,"XCP_task-emotionid_acq-acompcor_GSR_2020-02-06","GSR"))) %>%
#         unnest(df)
#       df <- gm_gsr %>% ungroup() %>% select(subid,sesid,drug,contains("X",ignore.case = F))
#       },
#     "glasser_amygdala" = {
#       g<- subInfo %>%
#         filter(exists == 1) %>%
#         group_by(subid, sesid) %>%
#         mutate(df = list(extract_glasser(subid,sesid,"XCP_task-emotionid_acq-acompcor_2020-02-06"))) %>%
#         unnest(df)
#       df <- g %>% ungroup() %>% select(subid,sesid,drug,contains("NZ"))
#       },
#     "amygdala_seed" = {
#       # t<-readRDS("/cbica/projects/alpraz_EI/input/amygdala_conn_voxelwise.rds")
#       t<-subInfo %>% mutate(voxMap = purrr::pmap(list(subid,sesid,"XCP_task-emotionid_acq-acompcor_2020-02-06"),.f = extract_voxels))
#       saveRDS(t,"/cbica/projects/alpraz_EI/input/amygdala_conn_voxelwise.rds")
#       s<-as.data.frame(t(simplify2array(t$voxMap)))
#       df<-cbind(subInfo %>% select(subid,sesid,drug),s)
#     }
#   )
#
#   # ALFF & Reho
#   switch (data_source,
#     "alff_glasser" = {
#       alff<- subInfo %>%
#         group_by(subid, sesid) %>%
#         mutate(df = list(extract_alff_glasser(subid,sesid,"XCP_SDK_TASK_2020-03-25"))) %>%
#         unnest(df)
#       df <- alff %>% ungroup() %>% select(subid,sesid,drug,contains("alff")) %>% select_if(~ !any(is.na(.)))
#     },
#     "reho_glasser" = {
#       reho<- subInfo %>%
#         group_by(subid, sesid) %>%
#         mutate(df = list(extract_reho_glasser(subid,sesid,"XCP_SDK_TASK_2020-03-25"))) %>%
#         unnest(df)
#       df <- reho %>% ungroup() %>% select(subid,sesid,drug,contains("reho")) %>% select_if(~ !any(is.na(.)))
#     },
#     "alff_voxel" = {
#       t<-subInfo %>% mutate(voxMap = purrr::pmap(list(subid,sesid,"XCP_SDK_TASK_2020-03-25"),.f = extract_alff_voxels))
#       saveRDS(t,"/cbica/projects/alpraz_EI/input/alffZ_voxelwise_gm.rds")
#       s<-as.data.frame(t(simplify2array(t$voxMap)))
#       df<-cbind(subInfo %>% select(subid,sesid,drug),s)
#     }
#   )
#   }
# }
SVM_2class <- function(df,folds,feature_selection = F,feature_proportion = .1){
if (feature_selection == T) {
cat(sprintf("\nPerforming feature extraction: extracting the top %1.3f features\n",feature_proportion))
}
# set up folds for CV
if (folds == "LOO") {
num_folds = length(unique(df$subid))
} else {
num_folds = folds
}
foldIdxs <- data.frame(subid=unique(df$subid))
foldIdxs$foldID <- row_number(foldIdxs$subid)
foldIdxs$foldID <- ntile(foldIdxs$foldID,num_folds)
foldIdxs$subid <- sample(foldIdxs$subid)
out_data<-setNames(data.frame(matrix(ncol = 4, nrow = 0)), c("subid", "sesid", "drug","svm.pred"))
# Loop over folds
for (fold in 1:num_folds) {
#training data
trainingIDs <- as.matrix(foldIdxs %>% filter(foldID != fold) %>% select(subid))
trainingIndex <- df$subid %in% trainingIDs # indices for training subs
trainingData <- trainingData <- df[trainingIndex, 3:dim(df)[2] ] # Training data. Take columns 3:end (Removes subid and sesid).
#testing data
testData <- df[!trainingIndex, 4:dim(df)[2]] # test data. Take columns 4:end (Removes subid sesid drug).
# testLabels <- subInfo[!trainingIndex,c(1,2,7) ] # Labels for test data
testLabels <- data.frame(df[!trainingIndex,c(1:3) ]) # Labels for test data
#feature extraction if needed
if (feature_selection == T) {
feature_extracted_data <- featureExtraction(trainingData,feature_proportion = feature_proportion)
trainingData <- feature_extracted_data[[1]]
feature_names <- feature_extracted_data[[2]]
testData <- testData %>% select(feature_names)
}
# svm
svm.model <- svm(x = as.matrix(trainingData[, 2:dim(trainingData)[2]]), y = as.matrix(trainingData[,1]),
cost = 100, kernel = "linear",type = "C-classification",scale = F)
svm.pred <- predict(svm.model, as.matrix(testData))
# outs<-cbind(testLabels,svm.pred)
testLabels$svm.pred = svm.pred
print(sprintf("Fold %d, acc = %1.3f",fold,sum(testLabels$drug==testLabels$svm.pred)/nrow(testLabels)))
out_data <- rbind(out_data,testLabels)
}
accuracy <- sum(out_data$svm.pred==out_data$drug)/dim(out_data)[1]
b <- binom.test(sum(out_data$svm.pred==out_data$drug),dim(out_data)[1],.5)
print(sprintf("Overall Accuracy: %1.3f; p = %.5f",sum(out_data$svm.pred==out_data$drug)/dim(out_data)[1],b$p.value))
return(b)
}
## Load Libraries
require(ggplot2)
require(tidyverse)
library(oro.nifti)
library(neurobase)
library(gtools)
library(e1071)
library(ridge)
library(matrixTests)
theme_set(theme_classic())
extract_voxels <- function(subid,sesid,dataname) {
fname <- sprintf("/cbica/projects/alpraz_EI/data/%s/%s/%s/amygdala_conn_fisherz.nii.gz",dataname,subid,sesid)
mask<-coverage_mask
this_nii <- readnii(fname)
vals <- c(this_nii[mask==1])
return(vals)
}
extract_glasser <- function(subid,sesid,dataname) {
fname <- sprintf("/cbica/projects/alpraz_EI/data/%s/%s/%s/amygdala_glasser_connectivity.csv",dataname,subid,sesid)
thisData<- read.table(fname)
vals <- as_tibble(thisData)
return(vals)
}
extract_glasser_matrix <- function(subid,sesid,dataname,gsr){
if (gsr == "GSR") {
fname <- sprintf("/cbica/projects/alpraz_EI/data/%s/%s/%s/glasser_CC_GSR_000.netcc",dataname,subid,sesid)
} else {
fname <- sprintf("/cbica/projects/alpraz_EI/data/%s/%s/%s/glasser_CC_000.netcc",dataname,subid,sesid)
}
thisCC <- as.matrix(read.table(fname,header = T,skip = 4))
# thisCC_vector = as.vector(thisCC)
thisCC_vector = thisCC[upper.tri(thisCC,diag = F)]
vals <- as_tibble(data.frame(t(thisCC_vector)))
}
extract_matrix <- function(subid,sesid,atlasname,gsr){
if (gsr == "GSR") {
fname <- sprintf("/cbica/projects/alpraz_EI/data/XCP_SDK_TASK_GSR2020-03-30/%s/%s/%s_CC_GSR_000.netcc",subid,sesid,atlasname)
} else {
fname <- sprintf("/cbica/projects/alpraz_EI/data/XCP_SDK_TASK_2020-03-25/%s/%s/%s_CC_noGSR_000.netcc",subid,sesid,atlasname)
}
print(fname)
thisCC <- as.matrix(read.table(fname,header = T,skip = 4))
# thisCC_vector = as.vector(thisCC)
thisCC_vector = thisCC[upper.tri(thisCC,diag = F)]
vals <- as_tibble(data.frame(t(thisCC_vector)))
}
extract_alff_glasser <- function(subid,sesid,dataname) {
fname <- sprintf("/cbica/projects/alpraz_EI//data/%s/xcpengine/sub-0%s/ses-00%s/task-emotionid/space-MNI152NLin2009cAsym/roiquant/glasser360/sub-0%s_ses-00%s_task-emotionid_space-MNI152NLin2009cAsym_glasser360_mean_alffZ.csv",dataname,subid,sesid,subid,sesid)
thisData<- read.csv(fname)
vals <- as_tibble(thisData)
return(vals)
}
extract_reho_glasser <- function(subid,sesid,dataname) {
fname <- sprintf("/cbica/projects/alpraz_EI//data/%s/xcpengine/sub-0%s/ses-00%s/task-emotionid/space-MNI152NLin2009cAsym/roiquant/glasser360/sub-0%s_ses-00%s_task-emotionid_space-MNI152NLin2009cAsym_glasser360_mean_rehoZ.csv",dataname,subid,sesid,subid,sesid)
thisData<- read.csv(fname)
vals <- as_tibble(thisData)
return(vals)
}
extract_alff_voxels <- function(subid,sesid,dataname) {
fname <- sprintf("/cbica/projects/alpraz_EI/data/%s/%s/%s/alffZ.nii.gz",dataname,subid,sesid)
mask<-coverage_mask
this_nii <- readnii(fname)
vals <- c(this_nii[mask==1])
return(vals)
}
subData <- read.csv('/cbica/projects/alpraz_EI/input/alpraz_sublist_FD.csv')
subInfo <- subData %>% filter(exists==1 & motion_pass==1)
# coverage_mask <- readnii("/cbica/projects/alpraz_EI/input/coverage_mask_95perc.nii.gz")
#
# data_source = "matrix" #"amygdala_seed" #"alff_voxel"  # "glasser_matrix_GSR"# "glasser_matrix" #"glasser_matrix_GSR", "glasser_amygdala", "amygdala_seed"
#
# atlasname = "aal116"
# if (file.exists(sprintf("%s.csv",data_source))) {
#     df <- load(sprintf("%s.Rda",data_source))
#   } else {
#   switch (data_source,
#     "matrix" = {
#       gm<- subInfo %>%
#         filter(!(subid %in% c(11599,12435,13077,13415,13486))) %>%
#         group_by(subid, sesid) %>%
#         mutate(df = list(extract_matrix(subid,sesid,atlasname,"GSR"))) %>%
#         unnest(df)
#       df <- gm %>% ungroup() %>% select(subid,sesid,drug,contains("X",ignore.case = F))
#           },
#     "glasser_matrix" = {
#       gm<- subInfo %>%
#         group_by(subid, sesid) %>%
#         mutate(df = list(extract_glasser_matrix(subid,sesid,"XCP_task-emotionid_acq-acompcor_2020-02-06","noGSR"))) %>%
#         unnest(df)
#       df <- gm %>% ungroup() %>% select(subid,sesid,drug,contains("X",ignore.case = F))
#       },
#     "glasser_matrix_GSR" = {
#       gm_gsr<- subInfo %>%
#         filter(exists == 1& subid!=13532) %>%
#         group_by(subid, sesid) %>%
#         mutate(df = list(extract_glasser_matrix(subid,sesid,"XCP_task-emotionid_acq-acompcor_GSR_2020-02-06","GSR"))) %>%
#         unnest(df)
#       df <- gm_gsr %>% ungroup() %>% select(subid,sesid,drug,contains("X",ignore.case = F))
#       },
#     "glasser_amygdala" = {
#       g<- subInfo %>%
#         filter(exists == 1) %>%
#         group_by(subid, sesid) %>%
#         mutate(df = list(extract_glasser(subid,sesid,"XCP_task-emotionid_acq-acompcor_2020-02-06"))) %>%
#         unnest(df)
#       df <- g %>% ungroup() %>% select(subid,sesid,drug,contains("NZ"))
#       },
#     "amygdala_seed" = {
#       # t<-readRDS("/cbica/projects/alpraz_EI/input/amygdala_conn_voxelwise.rds")
#       t<-subInfo %>% mutate(voxMap = purrr::pmap(list(subid,sesid,"XCP_task-emotionid_acq-acompcor_2020-02-06"),.f = extract_voxels))
#       saveRDS(t,"/cbica/projects/alpraz_EI/input/amygdala_conn_voxelwise.rds")
#       s<-as.data.frame(t(simplify2array(t$voxMap)))
#       df<-cbind(subInfo %>% select(subid,sesid,drug),s)
#     }
#   )
#
#   # ALFF & Reho
#   switch (data_source,
#     "alff_glasser" = {
#       alff<- subInfo %>%
#         group_by(subid, sesid) %>%
#         mutate(df = list(extract_alff_glasser(subid,sesid,"XCP_SDK_TASK_2020-03-25"))) %>%
#         unnest(df)
#       df <- alff %>% ungroup() %>% select(subid,sesid,drug,contains("alff")) %>% select_if(~ !any(is.na(.)))
#     },
#     "reho_glasser" = {
#       reho<- subInfo %>%
#         group_by(subid, sesid) %>%
#         mutate(df = list(extract_reho_glasser(subid,sesid,"XCP_SDK_TASK_2020-03-25"))) %>%
#         unnest(df)
#       df <- reho %>% ungroup() %>% select(subid,sesid,drug,contains("reho")) %>% select_if(~ !any(is.na(.)))
#     },
#     "alff_voxel" = {
#       t<-subInfo %>% mutate(voxMap = purrr::pmap(list(subid,sesid,"XCP_SDK_TASK_2020-03-25"),.f = extract_alff_voxels))
#       saveRDS(t,"/cbica/projects/alpraz_EI/input/alffZ_voxelwise_gm.rds")
#       s<-as.data.frame(t(simplify2array(t$voxMap)))
#       df<-cbind(subInfo %>% select(subid,sesid,drug),s)
#     }
#   )
#   }
# }
SVM_2class <- function(df,folds,feature_selection = F,feature_proportion = .1){
if (feature_selection == T) {
cat(sprintf("\nPerforming feature extraction: extracting the top %1.3f features\n",feature_proportion))
}
# set up folds for CV
if (folds == "LOO") {
num_folds = length(unique(df$subid))
} else {
num_folds = folds
}
foldIdxs <- data.frame(subid=unique(df$subid))
foldIdxs$foldID <- row_number(foldIdxs$subid)
foldIdxs$foldID <- ntile(foldIdxs$foldID,num_folds)
foldIdxs$subid <- sample(foldIdxs$subid)
out_data<-setNames(data.frame(matrix(ncol = 4, nrow = 0)), c("subid", "sesid", "drug","svm.pred"))
# Loop over folds
for (fold in 1:num_folds) {
#training data
trainingIDs <- as.matrix(foldIdxs %>% filter(foldID != fold) %>% select(subid))
trainingIndex <- df$subid %in% trainingIDs # indices for training subs
trainingData <- trainingData <- df[trainingIndex, 3:dim(df)[2] ] # Training data. Take columns 3:end (Removes subid and sesid).
#testing data
testData <- df[!trainingIndex, 4:dim(df)[2]] # test data. Take columns 4:end (Removes subid sesid drug).
# testLabels <- subInfo[!trainingIndex,c(1,2,7) ] # Labels for test data
testLabels <- data.frame(df[!trainingIndex,c(1:3) ]) # Labels for test data
#feature extraction if needed
if (feature_selection == T) {
feature_extracted_data <- featureExtraction(trainingData,feature_proportion = feature_proportion)
trainingData <- feature_extracted_data[[1]]
feature_names <- feature_extracted_data[[2]]
testData <- testData %>% select(feature_names)
}
# svm
svm.model <- svm(x = as.matrix(trainingData[, 2:dim(trainingData)[2]]), y = as.matrix(trainingData[,1]),
cost = 100, kernel = "linear",type = "C-classification",scale = F)
svm.pred <- predict(svm.model, as.matrix(testData))
# outs<-cbind(testLabels,svm.pred)
testLabels$svm.pred = svm.pred
print(sprintf("Fold %d, acc = %1.3f",fold,sum(testLabels$drug==testLabels$svm.pred)/nrow(testLabels)))
out_data <- rbind(out_data,testLabels)
}
accuracy <- sum(out_data$svm.pred==out_data$drug)/dim(out_data)[1]
b <- binom.test(sum(out_data$svm.pred==out_data$drug),dim(out_data)[1],.5)
print(sprintf("Overall Accuracy: %1.3f; p = %.5f",sum(out_data$svm.pred==out_data$drug)/dim(out_data)[1],b$p.value))
return(b)
}
featureExtraction <- function(trainingData, feature_proportion = .1){
features <- as.matrix(trainingData %>% select(-drug))
drug <- features[trainingData$drug==0,]
placebo <- features[trainingData$drug==1,]
tstats<-col_t_paired(placebo,drug)
newdata=t(tstats[order(-abs(tstats$statistic)),])
keep_features = colnames(newdata)[1:round(feature_proportion*dim(newdata)[2])]
newTrainingData <- trainingData %>% select(drug,keep_features)
return(list(newTrainingData,keep_features))
}
